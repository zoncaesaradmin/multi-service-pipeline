LANG=python
IMAGE_NAME=cratos

include ../Makefile.include

# Simplified Cratos Project Makefile
.PHONY: help devenv dev dev-run dev-clean test-coverage buildall clean package package-local pre_build post_build

# Default ENTRYPOINT_MODE if not set
ENTRYPOINT_MODE ?= start

# Build tags (empty by default, but can be set from environment/command line)
BUILD_TAGS ?=

# Helper function to safely append a tag if not already present
define append_tag
$(if $(filter $(1),$(BUILD_TAGS)),$(BUILD_TAGS),$(if $(BUILD_TAGS),$(BUILD_TAGS) $(1),$(1)))
endef

# Local build tags - safely append 'local' to existing BUILD_TAGS
LOCAL_BUILD_TAGS = $(call append_tag,local)

# Default target
help:
	@echo "Cratos Project - Simplified Makefile"
	@echo "====================================="
	@echo ""
	@echo "üöÄ LOCAL DEVELOPMENT (Mac/PC):"
	@echo "  dev          - Full development workflow:"
	@echo "                 ‚Ä¢ Clean environment and processes"
	@echo "                 ‚Ä¢ Build service and testrunner"
	@echo "                 ‚Ä¢ Set up LocalBus topics"
	@echo "                 ‚Ä¢ Run integration tests"
	@echo "                 ‚Ä¢ Generate coverage reports"
	@echo "                 ‚Ä¢ Collect logs and test results"
	@echo "                 ‚Ä¢ Auto cleanup on completion"
	@echo ""
	@echo "  dev-run      - Quick development iteration:"
	@echo "                 ‚Ä¢ Use existing binaries"
	@echo "                 ‚Ä¢ Run integration tests only"
	@echo "                 ‚Ä¢ Skip build steps"
	@echo "                 ‚Ä¢ Ideal for rapid testing"
	@echo ""
	@echo "  dev-clean    - Development cleanup:"
	@echo "                 ‚Ä¢ Kill service and testrunner processes"
	@echo "                 ‚Ä¢ Clean test artifacts and logs"
	@echo "                 ‚Ä¢ Remove LocalBus data"
	@echo "                 ‚Ä¢ Reset environment completely"
	@echo ""
	@echo "  test-coverage- Generate coverage report:"
	@echo "                 ‚Ä¢ Process raw coverage data"
	@echo "                 ‚Ä¢ Generate HTML report"
	@echo "                 ‚Ä¢ Show function coverage"
	@echo "                 ‚Ä¢ Display coverage summary"
	@echo ""
	@echo "  devenv      - Setup development environment:"
	@echo "                 ‚Ä¢ Create .env from template"
	@echo "                 ‚Ä¢ Configure SERVICE_HOME"
	@echo "                 ‚Ä¢ Set up local environment"
	@echo ""
	@echo "  testrun     - Run testrunner directly:"
	@echo "                 ‚Ä¢ Execute testrunner binary"
	@echo "                 ‚Ä¢ Useful for debugging"
	@echo ""
	@echo "üè≠ PRODUCTION BUILD:"
	@echo "  buildall     - Production build with coverage:"
	@echo "                 ‚Ä¢ Enforce coverage requirements"
	@echo "                 ‚Ä¢ Build service with production tags"
	@echo "                 ‚Ä¢ Build testrunner"
	@echo "                 ‚Ä¢ Ready for deployment"
	@echo ""
	@echo "üì¶ CI/CD & BUILD SYSTEM:"
	@echo "  package      - Production mode build:"
	@echo "                 ‚Ä¢ No local development tags"
	@echo "                 ‚Ä¢ Suitable for deployment"
	@echo ""
	@echo "  package-local- Local development build:"
	@echo "                 ‚Ä¢ Includes 'local' build tag"
	@echo "                 ‚Ä¢ Enables local-only features"
	@echo ""
	@echo "  pre_build   - CI/CD pre-build steps"
	@echo "  post_build  - CI/CD post-build cleanup"
	@echo ""
	@echo "üßπ CLEANUP:"
	@echo "  clean       - Clean all artifacts:"
	@echo "                 ‚Ä¢ Remove build outputs"
	@echo "                 ‚Ä¢ Clean test results"
	@echo "                 ‚Ä¢ Remove temporary files"
	@echo ""
	@echo "Parameters:"
	@echo "  ENTRYPOINT_MODE - Build/run mode (default: start)"
	@echo "  BUILD_TAGS      - Go build tags:"
	@echo "                    ‚Ä¢ Production: empty by default"
	@echo "                    ‚Ä¢ Local dev: 'local' tag added"
	@echo ""
	@echo "Examples:"
	@echo "  make devenv                        # Set up development environment"
	@echo "  make dev                           # Full development cycle"
	@echo "  make dev-run                       # Quick test iteration"
	@echo "  make test-coverage                 # Process coverage data"
	@echo "  make buildall BUILD_TAGS=feature   # Build with custom tag"
	@echo "  make package-local                 # Local development build"
	@echo "  ENTRYPOINT_MODE=test make package  # Run tests in CI/CD"

# ==============================================================================
# LOCAL DEVELOPMENT WORKFLOW
# ==============================================================================

# Full development workflow with automatic cleanup
dev: dev-clean
	@echo "üöÄ Starting full development workflow..."
	@echo ""
	@echo "üìã Workflow Steps:"
	@echo "  1. Clean environment and setup directories"
	@echo "  2. Build service and testrunner binaries"
	@echo "  3. Setup LocalBus topics for testing"
	@echo "  4. Start service with coverage tracking"
	@echo "  5. Run integration test suite"
	@echo "  6. Collect logs and generate reports"
	@echo "  7. Process coverage data"
	@echo "  8. Clean up processes and temporary files"
	@echo ""
	@cd test && ./local_test_run.sh build
	@echo ""
	@echo "‚úÖ Development workflow completed!"
	@echo "üìÅ Results available in:"
	@echo "   ‚Ä¢ Coverage Report: test/results/coverage.html"
	@echo "   ‚Ä¢ Test Results:   test/results/report.txt"
	@echo "   ‚Ä¢ Logs:          test/results/logs/"

# Quick development iteration - skips rebuild, uses existing binaries
dev-run:
	@echo "‚ö° Quick development run (using existing binaries)..."
	@echo "üìã Steps:"
	@echo "  1. Setup test environment"
	@echo "  2. Start service (existing binary)"
	@echo "  3. Run integration tests"
	@echo "  4. Collect results and logs"
	@cd test && ./local_test_run.sh run
	@echo "‚úÖ Quick run completed!"
	@echo "üìÅ Check test/results/ for latest run data"

# Development cleanup
dev-clean:
	@echo "üßπ Cleaning development environment..."
	@pkill -f "service" 2>/dev/null || true
	@pkill -f "testrunner" 2>/dev/null || true
	@rm -rf test/results/ test/coverage/ test/*.pid 2>/dev/null || true
	@rm -rf /tmp/cratos-messagebus* 2>/dev/null || true
	@echo "‚úÖ Development environment cleaned"

# Generate coverage report from latest test run (standalone)
test-coverage:
	@echo "üìä Generating coverage report from latest test run..."
	@if [ -f "test/results/coverage.out" ]; then \
		echo "‚úÖ Using existing coverage data..."; \
		cd src/service && \
		go tool cover -html=../../test/results/coverage.out -o=../../test/results/coverage.html && \
		go tool cover -func=../../test/results/coverage.out > ../../test/results/coverage_summary.txt && \
		cd ../../ && \
		echo "‚úÖ Coverage report updated: test/results/coverage.html"; \
		echo "üìã Coverage summary:"; \
		go tool cover -func=test/results/coverage.out | tail -1; \
	elif [ -d "test/coverage" ] && [ -n "$$(ls -A test/coverage 2>/dev/null)" ]; then \
		echo "‚úÖ Processing raw coverage data..."; \
		mkdir -p test/results && \
		cd src/service && \
		go tool covdata textfmt -i=../../test/coverage -o=../../test/results/coverage.out && \
		go tool cover -html=../../test/results/coverage.out -o=../../test/results/coverage.html && \
		go tool cover -func=../../test/results/coverage.out > ../../test/results/coverage_summary.txt && \
		cd ../../ && \
		echo "‚úÖ Coverage report: test/results/coverage.html"; \
		echo "üìã Coverage summary:"; \
		go tool cover -func=test/results/coverage.out | tail -1; \
	else \
		echo "‚ùå No coverage data found. Run 'make dev' first."; \
		exit 1; \
	fi

# ==============================================================================
# CI/CD & BUILD SYSTEM TARGETS
# ==============================================================================

# Package target - production build without local development features
# Use this for deployment builds where local testing features should be disabled
package:
	@echo "üì¶ Running production build (ENTRYPOINT_MODE=$(ENTRYPOINT_MODE))..."
	@echo "   ‚Ä¢ No local development features"
	@echo "   ‚Ä¢ Build tags: $(if $(BUILD_TAGS),'$(BUILD_TAGS)','<none>')"
	@$(MAKE) -C src $(ENTRYPOINT_MODE) BUILD_TAGS="$(BUILD_TAGS)"

# Package target for local development - includes local testing features
# Use this for local development and testing where additional debug/test features are needed
package-local:
	@echo "üîß Running local development build (ENTRYPOINT_MODE=$(ENTRYPOINT_MODE))..."
	@echo "   ‚Ä¢ Including local development features"
	@echo "   ‚Ä¢ Build tags: $(LOCAL_BUILD_TAGS)"
	@$(MAKE) -C src $(ENTRYPOINT_MODE) BUILD_TAGS="$(LOCAL_BUILD_TAGS)"

# Pre-build target that depends on package
pre_build: package
	@echo "Pre-build completed"
	@cp ${ROOT}/tools/scripts/initializer/set-common-ni-env.sh .

# Post-build target that depends on clean
post_build: clean
	@echo "Post-build completed"
	-@rm -fR set-common-ni-env.sh

# ==============================================================================
# PRODUCTION BUILD
# ==============================================================================

# Production build with enforced coverage
buildall:
	@echo "üè≠ Production build with enforced coverage..."
	@$(MAKE) -C src coverage-enforce
	@$(MAKE) -C src service-build BUILD_TAGS="$(BUILD_TAGS)"
	@$(MAKE) -C src testrunner-build BUILD_TAGS="$(BUILD_TAGS)"
	@echo "‚úÖ Production build completed with enforced coverage!"

# ==============================================================================
# CLEANUP
# ==============================================================================

# Clean all artifacts
clean:
	@echo "üßπ Cleaning all build artifacts..."
	@$(MAKE) -C src clean
	@rm -rf test/results/ test/coverage/ test/*.pid 2>/dev/null || true
	@rm -rf /tmp/cratos-messagebus* 2>/dev/null || true
	@echo "‚úÖ All artifacts cleaned"


# Copy env.example to .env and set SERVICE_HOME to current root directory
devenv:
	@echo "Setting up .env from env.example..."
	cp test/env.example .env
	@echo "Updating .env with current SERVICE_HOME..."
	sed -i.bak "s|^SERVICE_HOME=.*$$|SERVICE_HOME=$(shell pwd)|g" .env
	@rm .env.bak
	@echo ".env created with SERVICE_HOME=$(shell pwd)"

# Run testrunner directly - useful for debugging test issues
# This bypasses the test orchestration script and runs the testrunner binary directly
testrun:
	@echo "üîç Running testrunner directly..."
	@echo "Note: This is for debugging only. Use 'make dev' or 'make dev-run' for normal testing."
	@$(MAKE) -C src/testrunner run
